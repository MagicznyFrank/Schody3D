import Part
import sys
import importWebGL
import logging
import traceback
from datetime import datetime
import string
import random
import os
import webbrowser


# Konfiguracja loggera
log_file_path = '/schody3d/Schody3Dfreecad.log'
logging.basicConfig(filename=log_file_path, level=logging.INFO)

def generate_random_name(length=15):
    #Generuje losową nazwę
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for _ in range(length))

def create_stairs(length, width, step_height, step_spacing, num_steps):
    try:
        # Generowanie losowej nazwy
        doc_name = generate_random_name()
        logging.info("{} - Active document: {} - Generated document name: {}".format(
            datetime.now(), App.ActiveDocument.Label if App.ActiveDocument else 'None', doc_name))

        # Stwórz nowy dokument
        App.newDocument(doc_name)
        doc = App.ActiveDocument

        first_step = Part.makeBox(length, width, step_height)
        doc.addObject("Part::Feature", "Step1").Shape = first_step
        first_step.Placement.Base += App.Vector(0, -width, 0)

        substep_height = step_spacing + step_height

        for i in range(2, int(num_steps) + 1):  # Zmieniono num_steps na int
            step = first_step.copy()
            step.Placement.Base += App.Vector(0, i * width, 0)
            step.Placement.Base += App.Vector(0, 0, (i - 1) * (step_spacing + step_height))
            doc.addObject("Part::Feature", "Step{}".format(i)).Shape = step

            substep = Part.makeBox(length, 50, substep_height)
            substep.Placement.Base = step.Placement.Base
            substep.Placement.Base += App.Vector(0, 0, -substep_height)
            doc.addObject("Part::Feature", "Substep{}".format(i)).Shape = substep

        doc.recompute()

        # Dodaj log dla aktualnej ścieżki roboczej
        current_directory = os.getcwd()
        logging.info("{} - Current working directory: {}".format(datetime.now(), current_directory))

        logging.info("{} - Active document: {} - Stairs created successfully with parameters: length={}, width={}, step_height={}, step_spacing={}, num_steps={}".format(
            datetime.now(), App.ActiveDocument.Label if App.ActiveDocument else 'None', length, width, step_height, step_spacing, num_steps))
        return doc_name
    except Exception as e:
        logging.error("{} - Active document: {} - Error during stairs creation: {}".format(
            datetime.now(), App.ActiveDocument.Label if App.ActiveDocument else 'None', str(e)))
        logging.error(traceback.format_exc())
        raise

def export_to_webgl(doc_name, num_steps):
    try:
        # Eksportuj do formatu WebGl
        doc = App.getDocument(doc_name)

        if doc:
            doc.saveAs("FreeCadProjects/{}.FCStd".format(doc_name))
            objs = []

            for i in range(1, int(num_steps) + 1):
                step_name = "Step{}".format(i)
                substep_name = "Substep{}".format(i)

                if doc.getObject(step_name):
                    objs.append(doc.getObject(step_name))

                if doc.getObject(substep_name):
                    objs.append(doc.getObject(substep_name))

            #ścieżka do eksportu
            export_path = "FreeCadProjects/{}.html".format(doc_name)
            logging.info("{} - Active document: {} - Export path: {}".format(
                datetime.now(), doc.Label if doc else 'None', export_path))
            logging.info("{} - Active document: {} - Export objs: {}".format(
                datetime.now(), doc.Label if doc else 'None', objs))
            importWebGL.export(objs, export_path)
            logging.info("{} - Active document: {} - Exported to WebGL successfully: {}".format(
                datetime.now(), doc.Label if doc else 'None', export_path))

            webbrowser.open('file://' + os.path.realpath(export_path))
        else:
            logging.error("{} - Active document: None - Error during WebGL export: Document not found".format(
                datetime.now()))
    except Exception as e:
        logging.error("{} - Active document: {} - Error during WebGL export: {}".format(
            datetime.now(), doc.Label if doc else 'None', str(e)))
        logging.error(traceback.format_exc())

def get_stair_parameters():
    try:
        # Pobierz parametry z linii poleceń
        logging.info("{} - Active document: {} - Received arguments: {}".format(
            datetime.now(), App.ActiveDocument.Label if App.ActiveDocument else 'None', sys.argv))

        length = float(sys.argv[3])
        width = float(sys.argv[4])
        step_height = float(sys.argv[5])
        step_spacing = float(sys.argv[6])
        num_steps = float(sys.argv[7])

        # Dodaj log przed utworzeniem schodów
        logging.info("{} - Active document: {} - Creating stairs with parameters: length={}, width={}, step_height={}, step_spacing={}, num_steps={}".format(
            datetime.now(), App.ActiveDocument.Label if App.ActiveDocument else 'None', length, width, step_height, step_spacing, num_steps))

        # Utwórz schody i eksportuj do WebGL
        doc_name = create_stairs(length, width, step_height, step_spacing, num_steps)
        export_to_webgl(doc_name, num_steps)
    except Exception as e:
        logging.error("{} - Active document: {} - Error during script execution: {}".format(
            datetime.now(), App.ActiveDocument.Label if App.ActiveDocument else 'None', str(e)))
        logging.error(traceback.format_exc())

if __name__ == '__main__':
    get_stair_parameters()
    sys.exit(0)
